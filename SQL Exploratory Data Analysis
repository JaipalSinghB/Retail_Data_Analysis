-- EDA 
-- CUSTOMER'S DEMOGRAPHIC KPI'S
                
-- 1) TOTAL NUMBER OF HOUSEHOLDS AND THEIR DISTRIBUTION OF COMPOSITION
       
       Select * from demographic_raw;
        
         SELECT HH_COMP_DESC, Total_Households,
                SUM(Total_Households) OVER(ORDER BY Total_Households  ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS TOTAL_HOUSEHOLDS
                     FROM
                     ( SELECT DISTINCT HH_COMP_DESC, 
                       count(HOUSEHOLD_KEY)  OVER(PARTITION BY HH_COMP_DESC) as Total_Households
                       from demographic_raw) AS A;
                       
-- 2)  AGE DISTRIBUTION: CALCULATE THE PERCENTAGE OR COUNT OF CUSTOMERS IN DIFFERENT AGE GROUPS.

        WITH CTE AS 
        (SELECT AGE_DESC,CLIENTS,SUM(CLIENTS)OVER(ORDER BY CLIENTS ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SUMM
        FROM(
        SELECT AGE_DESC, COUNT(HOUSEHOLD_KEY) AS CLIENTS
        FROM DEMOGRAPHIC_RAW
        GROUP BY 1 
        ORDER BY 2 ASC)AS A )
        
        SELECT *, ROUND(CLIENTS/SUMM*100 ,2) AS PERCENTAGE FROM CTE;

-- 3)  MARITAL STATUS DISTRIBUTION: ANALYZE THE PROPORTION OF CUSTOMERS IN DIFFERENT MARITAL STATUS CATEGORIES 

        SELECT MARITAL_STATUS_CODE, COUNT(HOUSEHOLD_KEY)AS TOTAL_HOUSEHOLD_KEY_OR_CLIENTS
        FROM DEMOGRAPHIC_RAW 
        GROUP BY 1 
        ORDER BY 2 ASC  ;
        
-- 4)  INCOME DISTRIBUTION: DETERMINE THE DISTRIBUTION OF CUSTOMERS ACROSS INCOME LEVELS\

        SELECT INCOME_DESC, COUNT(HOUSEHOLD_KEY)AS TOTAL_HOUSEHOLD_KEY_OR_CLIENTS
        FROM DEMOGRAPHIC_RAW 
        GROUP BY 1 
        ORDER BY 2 ASC  ;
        
-- 5)  HOMEOWNERSHIP DISTRIBUTION: CALCULATE THE PERCENTAGE OR COUNT OF CUSTOMERS WHO OWN OR RENT THEIR HOMES
        SELECT DISTINCT HOMEOWNER_DESC FROM DEMOGRAPHIC_RAW;

      WITH CTE AS (  SELECT  HOMEOWNER_DESC,
                SUM (CASE WHEN HOMEOWNER_DESC IN ('Homeowner','Probable Owner') THEN 1 ELSE NULL END ) AS OWNER,
                SUM (CASE WHEN HOMEOWNER_DESC IN ('Renter','Probable Renter') THEN 1 ELSE NULL END ) AS RENTER,
                SUM (CASE WHEN HOMEOWNER_DESC = 'Unknown' THEN 1 ELSE NULL END) AS UNKNOWN,
                COUNT(HOMEOWNER_DESC)AS TOTAL_HOMEOWNER_PER_CATEGORY        
                FROM DEMOGRAPHIC_RAW
                GROUP BY 1),

           CTE1 AS (  SELECT *, SUM(TOTAL_HOMEOWNER_PER_CATEGORY)OVER(ORDER BY TOTAL_HOMEOWNER_PER_CATEGORY ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)AS 
                TOTAL_HOMEOWNER
                FROM CTE)

                SELECT *,ROUND(TOTAL_HOMEOWNER_PER_CATEGORY/ TOTAL_HOMEOWNER*100,2) AS PERCENTAGE FROM CTE1;
                

--  Campaign KPIs:

--  6) NUMBER OF CAMPAIGNS: A) COUNT THE TOTAL NUMBER OF CAMPAIGNS IN THE CAMPAIGN TABLE 
--                          B) HOW MANY TYPES OF CAMPAIGN AND DURATION
       -- A)
       SELECT COUNT(DISTINCT CAMPAIGN) AS TOTAL_CAMPAIGN
       FROM 
            ( SELECT CR.*, CDR.START_DAY,CDR.END_DAY 
                FROM CAMPAIGN_RAW CR
                LEFT JOIN CAMPAIGN_DESC_RAW CDR -- USED JOIN TO GET THE DATA FROM CAMPAIGN TABLE AND CAMPAIGN DESCRIPTION TABLE 
                USING(CR.CAMPAIGN)            
                ORDER BY CR.CAMPAIGN ASC ) AS A;
        
        -- B) 
        SELECT DESCRIPTION,COUNT(CAMPAIGN),avg(END_DAY-START_DAY)AS AVG_DURATION_OF_CAMPAIGN
                FROM  CAMPAIGN_DESC_RAW
                GROUP BY 1;                            
        

--  7) CAMPAIGN DURATION: CALCULATE THE DURATION OF EACH CAMPAIGN

        WITH CTE AS  ( SELECT CR.*, CDR.START_DAY,CDR.END_DAY 
                FROM CAMPAIGN_RAW CR
                LEFT JOIN CAMPAIGN_DESC_RAW CDR -- USED JOIN TO GET THE DATA FROM CAMPAIGN TABLE AND CAMPAIGN DESCRIPTION TABLE 
                USING(CR.CAMPAIGN)            
                ORDER BY CR.CAMPAIGN ASC)

                SELECT DISTINCT CAMPAIGN , DESCRIPTION,  (END_DAY - START_DAY) AS DURATION_OF_CAMPAIGN FROM CTE  ORDER BY 3 desc ; 


--  8) CAMPAIGN EFFECTIVENESS: ANALYZE THE NUMBER OF HOUSEHOLDS ASSOCIATED WITH EACH CAMPAIGN  TO MEASURE CAMPAIGN REACH


        WITH CTE AS ( SELECT CR.*, CDR.START_DAY,CDR.END_DAY 
                FROM CAMPAIGN_RAW CR
                LEFT JOIN CAMPAIGN_DESC_RAW CDR -- USED JOIN TO GET THE DATA FROM CAMPAIGN TABLE AND CAMPAIGN DESCRIPTION TABLE 
                USING(CR.CAMPAIGN)            
                ORDER BY CR.CAMPAIGN ASC )

               SELECT CAMPAIGN , COUNT(HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS 
               FROM CTE 
               GROUP BY 1
               ORDER BY 2 DESC ;

-- COUPON KPI'S

--  9) COUPON REDEMPTION RATE: CALCULATE THE PERCENTAGE OF COUPONS REDEEMED COMPARED TO THE TOTAL NUMBER OF COUPONS DISTRIBUTED IN EACH CAMPAIGN
              
         WITH CTE AS 
                   ( SELECT CDR.CAMPAIGN , 
                       COUNT(DISTINCT CR.COUPON_UPC)AS TOTAL_COUPON_DSTRBTD , 
                       COUNT(DISTINCT CRD.COUPON_UPC)AS TOTAL_COUPON_REDEEMED 
                       FROM CAMPAIGN_DESC_RAW CDR 
                       LEFT JOIN COUPON_RAW CR USING(CAMPAIGN) 
                       LEFT JOIN COUPON_REDEMPT CRD USING(CAMPAIGN)
                       GROUP BY 1
                       ORDER BY 1 ASC )

                     SELECT *, ROUND(TOTAL_COUPON_REDEEMED/TOTAL_COUPON_DSTRBTD * 100,2) AS PERCENTAGE FROM CTE
                     ORDER BY 2 DESC;

          

--10 ) HOW MANY TOTAL COUPONS GIVEN AND ON HOW MANY PRODUCTS THE COUPONS WERE GIVEN IN EACH CAMPAIGN ? 

          SELECT CAMPAIGN,
                 COUNT(DISTINCT COUPON_UPC)AS TOTAL_COUPON,
                 COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCT 
          FROM COUPON_RAW
          GROUP BY 1
          ORDER BY 2 DESC,3 DESC;
          
          
--11 ) HOW MANY TOTAL COUPONS REDEEMED IN EACH CAMPAIGN

         SELECT COUNT(DISTINCT COUPON_UPC) AS COUPON_REDEEMED, CAMPAIGN FROM
             (  SELECT * FROM CAMPAIGN_DESC_RAW 
                 LEFT JOIN COUPON_REDEMPT
                 USING (CAMPAIGN) 
                 ) A
                 
                 GROUP BY 2
                 ORDER BY 2 ASC ;

-- Product KPIs:
  
--12 ) SALES VALUE: CALCULATE THE TOTAL SALES VALUE FOR EACH PRODUCT TO IDENTIFY TOP-SELLING PRODUCTS

         SELECT P.PRODUCT_ID,
                SUM(T.SALES_VALUE) AS TOTAL_SALES_VALUE,
                COUNT(T.QUANTITY) AS TOTAL_QUANTITY 
                FROM PRODUCT_RAW P RIGHT JOIN TRANSACTIONS T USING(PRODUCT_ID)
                GROUP BY 1
                ORDER BY 2 DESC;

       
         

--13 ) MANUFACTURER DISTRIBUTION: ANALYZE THE DISTRIBUTION OF PRODUCTS ACROSS DIFFERENT MANUFACTURERS .

          SELECT DISTINCT BRAND FROM PRODUCT_RAW;
         
          SELECT COUNT(DISTINCT (PRODUCT_ID)) AS TOTAL_PRODUCT ,MANUFACTURER 
          FROM PRODUCT_RAW 
          GROUP BY 2
          ORDER BY 1 DESC ;

--14 ) DEPARTMENT-WISE SALES: MEASURE THE SALES VALUE BY DEPARTMENT  TO UNDERSTAND WHICH DEPARTMENTS CONTRIBUTE MOST TO REVENUE.  

          SELECT P.DEPARTMENT, SUM(T.SALES_VALUE)
          -- SUM(T.SALES_VALUE) OVER(PARTITION BY P.DEPARTMENT) AS SALES 
          FROM PRODUCT_RAW P
          LEFT JOIN TRANSACTIONS T USING(PRODUCT_ID)
          GROUP BY 1
          ORDER BY 2 DESC ;

           SELECT DISTINCT P.DEPARTMENT, SUM(T.SALES_VALUE)OVER(PARTITION BY P.DEPARTMENT)
           FROM PRODUCT_RAW P
          LEFT JOIN TRANSACTIONS T USING(PRODUCT_ID)
          ORDER BY 2 DESC ;

          
--15 ) BRAND-WISE SALES: CALCULATE THE SALES VALUE FOR EACH BRAND (IN THE PRODUCT TABLE) TO IDENTIFY TOP-SELLING BRANDS

          SELECT P.BRAND, SUM(T.SALES_VALUE)
          -- SUM(T.SALES_VALUE) OVER(PARTITION BY P.DEPARTMENT) AS SALES 
          FROM PRODUCT_RAW P
          LEFT JOIN TRANSACTIONS T USING(PRODUCT_ID)
          GROUP BY 1
          ORDER BY 2 DESC ;


--16 ) TOTAL SALES VALUE: CALCULATE THE SUM OF SALES VALUES TO MEASURE OVERALL REVENUE.

          SELECT SUM(SALES_VALUE) AS TOTAL_REVENUE FROM TRANSACTIONS;


 --17 ) AVERAGE TRANSACTION VALUE: CALCULATE THE AVERAGE SALES VALUE PER TRANSACTION TO UNDERSTAND CUSTOMER SPENDING PATTERNS.
          SELECT * FROM TRANSACTIONS;
          
          SELECT HOUSEHOLD_KEY, ROUND(AVG(SALES_VALUE),2) AS AVG_SALES
          FROM TRANSACTIONS 
          GROUP BY 1 
          ORDER BY 1 ASC;
 
--18 ) QUANTITY SOLD: MEASURE THE TOTAL QUANTITY SOLD TO UNDERSTAND PRODUCT DEMAND.

          SELECT P.PRODUCT_ID, 
              P.COMMODITY_DESC,
              P.SUB_COMMODITY_DESC,
              SUM(T.QUANTITY)AS TOTAL_QUANTITY
         
          FROM PRODUCT_RAW P
          RIGHT JOIN TRANSACTIONS T USING(PRODUCT_ID)
        
          GROUP BY 1,2,3
          ORDER BY 4 DESC; 
          
--19 ) DISCOUNTS: A) ANALYZE THE AMOUNT AND IMPACT OF DISCOUNTS (RETAIL_DISC, COUPON_DISC, COUPON_MATCH_DISC) ON SALES VALUE.
--                B) EFFECT OF COUPONS ON SALES 

       -- A )
       SELECT COUNT(DISTINCT (C.COUPON_UPC)) COUPON ,
                T.HOUSEHOLD_KEY,
                COUNT(T.QUANTITY) QUANITY,
                COUNT(DISTINCT (T.TRANS_TIME)) PURCHASED_FREQUENCY FROM TRANSACTIONS T 
         INNER JOIN COUPON_REDEMPT C USING(HOUSEHOLD_KEY)
         GROUP BY 2
         ORDER BY 1 DESC,3 DESC ;
         
         SELECT C.COUPON_UPC ,
                T.HOUSEHOLD_KEY,
                T.QUANTITY, 
                T. TRANS_TIME FROM TRANSACTIONS T 
         INNER JOIN COUPON_REDEMPT C USING(HOUSEHOLD_KEY)
         ;


        --B ) 
              -- CREATED THE SEPERATE TABLE OF ANALYSIS
              RETAIL.PUBLIC.PRODUCT_RAW
              CREATE OR REPLACE TABLE MASTER 
               AS    
                   ( SELECT *,
                   CASE WHEN COUPON_DISC!= 0 OR COUPON_MATCH_DISC != 0 THEN 'USED' ELSE 'NOT USED' END AS COUPON 
                FROM     
                    ( SELECT  DISTINCT BASKET_ID, 
                SUM(SALES_VALUE) SALES, 
                SUM(COUPON_DISC) AS COUPON_DISC, 
                SUM(COUPON_MATCH_DISC) AS COUPON_MATCH_DISC  
                FROM TRANSACTIONS 
                GROUP BY 1 
                ORDER BY 2 DESC  )  A  ); 

                -- USING MASTER TABLE
                
               SELECT * FROM MASTER ORDER BY 2 DESC;
               
               SELECT COUPON ,
               COUNT(CASE WHEN COUPON = 'USED' THEN 1 ELSE NULL END )AS COUPON_USED,
               COUNT(CASE WHEN COUPON = 'NOT USED' THEN 1 ELSE NULL END )AS COUPON_NOT_USED,
               median(SALES) AS AVG_SALES
               FROM MASTER
               GROUP BY 1;
                

--20 ) TOTAL SALES OVER THE YEAR AND THE PERCENTAGE CHANGE OVER THE LAST YEAR.
              
             WITH CTE AS   
                         ( SELECT EXTRACT(YEAR FROM DATE) AS YEAR, 
                           SUM(SALES_VALUE)AS SALES
                           FROM TRANSACTIONS 
                           GROUP BY 1 
                           ORDER BY 2 ASC)
                           
                        SELECT *,                    
                        ROUND( (T2.SALES - T1.SALES) / T1.SALES* 100, 2)  AS PERCENTAGE_CHANGE
                        FROM CTE T1                        
                        CROSS JOIN CTE T2 
                        WHERE PERCENTAGE_CHANGE > 0;
